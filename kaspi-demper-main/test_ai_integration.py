#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ —Å WAHA —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import json
import sys
import os
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'waha'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from ai_seller_integration import AISellerIntegration, CustomerData, AISellerConfig
from kaspi_ai_integration import KaspiAIIntegration

def create_test_order_data() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    return {
        "customer": {
            "phone": "+77001234567",
            "name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤"
        },
        "order": {
            "order_id": "KASPI-ORD-2024-TEST-001",
            "product_name": "iPhone 15 Pro 256GB Space Black",
            "sku": "IPHONE15PRO256",
            "quantity": 1,
            "total_amount": 450000.0,
            "shop_name": "TechStore Kazakhstan"
        },
        "shop_id": "test_shop_001",
        "timestamp": datetime.now().isoformat()
    }

def create_test_customer_data() -> CustomerData:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
    return CustomerData(
        phone="+77001234567",
        name="–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
        order_id="KASPI-ORD-2024-TEST-001",
        product_name="iPhone 15 Pro 256GB Space Black",
        product_sku="IPHONE15PRO256",
        quantity=1,
        total_amount=450000.0,
        shop_name="TechStore Kazakhstan"
    )

async def test_ai_seller_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AISellerConfig(
            ai_seller_url="http://localhost:8080",
            enabled=True,
            test_mode=True,
            max_messages_per_customer=3,
            message_cooldown_hours=24,
            fallback_enabled=True
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        ai_integration = AISellerIntegration(config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await ai_integration.initialize()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        customer_data = create_test_customer_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST_PURCHASE —Ç—Ä–∏–≥–≥–µ—Ä
        print("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST_PURCHASE —Ç—Ä–∏–≥–≥–µ—Ä–∞...")
        success = await ai_integration.trigger_post_purchase(customer_data)
        
        if success:
            print("‚úÖ POST_PURCHASE —Ç—Ä–∏–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå POST_PURCHASE —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ORDER_DELIVERED —Ç—Ä–∏–≥–≥–µ—Ä
        print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ORDER_DELIVERED —Ç—Ä–∏–≥–≥–µ—Ä–∞...")
        success = await ai_integration.trigger_order_delivered(customer_data)
        
        if success:
            print("‚úÖ ORDER_DELIVERED —Ç—Ä–∏–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå ORDER_DELIVERED —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = ai_integration.get_metrics()
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {json.dumps(metrics, indent=2, ensure_ascii=False)}")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await ai_integration.cleanup()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞: {e}")
        return False

async def test_kaspi_ai_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kaspi AI"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kaspi AI...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        kaspi_integration = KaspiAIIntegration()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await kaspi_integration.initialize()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = create_test_order_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        print("üõçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
        success = await kaspi_integration.process_new_order(order_data)
        
        if success:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
        success = await kaspi_integration.process_delivered_order(order_data)
        
        if success:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = kaspi_integration.get_metrics()
        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ Kaspi AI: {json.dumps(metrics, indent=2, ensure_ascii=False)}")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await kaspi_integration.cleanup()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kaspi AI: {e}")
        return False

async def test_rate_limiting():
    """–¢–µ—Å—Ç rate limiting"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    
    try:
        from ai_seller_integration import RateLimiter
        
        # –°–æ–∑–¥–∞–µ–º rate limiter
        rate_limiter = RateLimiter(cooldown_hours=1)  # 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        
        test_phone = "+77001234567"
        
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        can_send = rate_limiter.can_send_message(test_phone, max_messages=3)
        print(f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if can_send else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}")
        
        if can_send:
            rate_limiter.record_message_sent(test_phone)
        
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        can_send = rate_limiter.can_send_message(test_phone, max_messages=3)
        print(f"–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if can_send else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}")
        
        if can_send:
            rate_limiter.record_message_sent(test_phone)
        
        # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        can_send = rate_limiter.can_send_message(test_phone, max_messages=3)
        print(f"–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if can_send else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}")
        
        if can_send:
            rate_limiter.record_message_sent(test_phone)
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        can_send = rate_limiter.can_send_message(test_phone, max_messages=3)
        print(f"–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' if can_send else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}")
        
        print("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting: {e}")
        return False

async def test_fallback_mechanism():
    """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
    
    try:
        from ai_seller_integration import AISellerIntegration, AISellerConfig, CustomerData
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º
        config = AISellerConfig(
            ai_seller_url="http://invalid-url:8080",  # –ù–µ–≤–µ—Ä–Ω—ã–π URL
            enabled=True,
            test_mode=True,
            fallback_enabled=True
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        ai_integration = AISellerIntegration(config)
        await ai_integration.initialize()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        customer_data = create_test_customer_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä (–¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å fallback)
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
        success = await ai_integration.trigger_post_purchase(customer_data)
        
        if not success:
            print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Å—Ä–∞–±–æ—Ç–∞–ª (AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            print("‚ö†Ô∏è Fallback –º–µ—Ö–∞–Ω–∏–∑–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        
        await ai_integration.cleanup()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞: {e}")
        return False

async def test_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Kaspi AI
        kaspi_integration = KaspiAIIntegration()
        await kaspi_integration.initialize()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = create_test_order_data()
        
        print("üìã –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        success1 = await kaspi_integration.process_new_order(order_data)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success1 else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("üì¶ –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        success2 = await kaspi_integration.process_delivered_order(order_data)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success2 else '‚ùå –û—à–∏–±–∫–∞'}")
        
        print("üìä –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
        metrics = kaspi_integration.get_metrics()
        print(f"   –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {'‚úÖ –î–∞' if metrics else '‚ùå –ù–µ—Ç'}")
        
        await kaspi_integration.cleanup()
        
        if success1 and success2 and metrics:
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ —Å WAHA\n")
    
    tests = [
        ("AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_ai_seller_integration),
        ("Kaspi AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_kaspi_ai_integration),
        ("Rate limiting", test_rate_limiting),
        ("Fallback –º–µ—Ö–∞–Ω–∏–∑–º", test_fallback_mechanism),
        ("–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", test_full_workflow)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç: {test_name}")
        print(f"{'='*60}")
        
        try:
            if await test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\n{'='*60}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä (ai-seller/main.py)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WAHA —Å–µ—Ä–≤–µ—Ä")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
