#!/usr/bin/env python3
# quick_start_product_parser.py
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üõçÔ∏è  –ü–ê–†–°–ï–† –¢–û–í–ê–†–û–í AI-–ü–†–û–î–ê–ñ–ù–ò–ö–ê        ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ Kaspi.kz –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π   ‚ïë
‚ïë  –°–æ–∑–¥–∞–Ω–∏–µ XML/JSON —Ñ–∞–π–ª–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–º     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

def print_menu():
    """–ü–µ—á–∞—Ç—å –º–µ–Ω—é"""
    print("""
üìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:

1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
3. üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä
4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
5. üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
6. üìÅ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
7. ‚ùå –í—ã—Ö–æ–¥

""")

async def run_product_parsing():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –¢–û–í–ê–†–û–í")
    print("="*50)
    
    shop_id = input("–í–≤–µ–¥–∏—Ç–µ Shop ID: ").strip()
    if not shop_id:
        print("‚ùå Shop ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    try:
        from product_parser import parse_products_for_ai_seller
        
        print(f"üìã –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: {shop_id}")
        print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        result = await parse_products_for_ai_seller(shop_id)
        
        if result.get("success"):
            print(f"\n‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.get('total_products', 0)}")
            print(f"üìÑ XML —Ñ–∞–π–ª: {result.get('xml_file', 'N/A')}")
            print(f"üìÑ JSON —Ñ–∞–π–ª: {result.get('json_file', 'N/A')}")
            print(f"üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {'–î–∞' if result.get('knowledge_base_updated') else '–ù–µ—Ç'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
            products = result.get('products', [])
            if products:
                print(f"\nüìã –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í:")
                for i, product in enumerate(products[:3]):
                    print(f"  {i+1}. {product.get('name', 'N/A')} - {product.get('price', 'N/A')} —Ç–µ–Ω–≥–µ")
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("\nüß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í")
    print("="*50)
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "test_product_parser.py"], 
                              capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")

def run_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüåê –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê")
    print("="*50)
    print("API —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8081")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        import subprocess
        subprocess.run([sys.executable, "product_api.py"])
    except KeyboardInterrupt:
        print("\nüõë API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def show_knowledge_base_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("="*50)
    
    try:
        from knowledge_base_integration import knowledge_base_integration
        
        stats = knowledge_base_integration.get_knowledge_base_stats()
        
        if stats:
            print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories_count', 0)}")
            print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('avg_price', 0):.2f} —Ç–µ–Ω–≥–µ")
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('avg_rating', 0):.2f}/5")
            print(f"üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}")
            
            price_range = stats.get('price_range', {})
            print(f"üíµ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {price_range.get('min', 0):.2f} - {price_range.get('max', 0):.2f} —Ç–µ–Ω–≥–µ")
        else:
            print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def search_products():
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüîç –ü–û–ò–°–ö –¢–û–í–ê–†–û–í")
    print("="*50)
    
    query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
    if not query:
        print("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    category = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
    
    try:
        from knowledge_base_integration import search_products_in_knowledge_base
        
        results = search_products_in_knowledge_base(query, category if category else None)
        
        if results:
            print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–û –¢–û–í–ê–†–û–í: {len(results)}")
            print("-" * 50)
            
            for i, product in enumerate(results[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{i+1}. {product.get('name', 'N/A')}")
                print(f"   SKU: {product.get('sku', 'N/A')}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', 'N/A')}")
                print(f"   –¶–µ–Ω–∞: {product.get('price', 'N/A')} —Ç–µ–Ω–≥–µ")
                print(f"   –†–µ–π—Ç–∏–Ω–≥: {product.get('rating', 'N/A')}/5")
                print(f"   –°—Å—ã–ª–∫–∞: {product.get('merchant_url', 'N/A')}")
                print()
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def show_data_files():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÅ –§–ê–ô–õ–´ –î–ê–ù–ù–´–•")
    print("="*50)
    
    try:
        knowledge_base_dir = Path(__file__).parent / "knowledge_base"
        
        if knowledge_base_dir.exists():
            files = list(knowledge_base_dir.glob("*"))
            
            if files:
                print(f"üìÇ –ü–∞–ø–∫–∞: {knowledge_base_dir}")
                print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                print("-" * 50)
                
                for file in files:
                    size_mb = file.stat().st_size / (1024 * 1024)
                    print(f"üìÑ {file.name}")
                    print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
                    print(f"   –¢–∏–ø: {file.suffix}")
                    print()
            else:
                print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ knowledge_base –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        knowledge_base_file = Path(__file__).parent / "knowledge_base.json"
        if knowledge_base_file.exists():
            size_mb = knowledge_base_file.stat().st_size / (1024 * 1024)
            print(f"üß† –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: knowledge_base.json ({size_mb:.2f} MB)")
        else:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    while True:
        print_menu()
        
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-7): ").strip()
            
            if choice == "1":
                await run_product_parsing()
            elif choice == "2":
                run_tests()
            elif choice == "3":
                run_api_server()
            elif choice == "4":
                show_knowledge_base_stats()
            elif choice == "5":
                search_products()
            elif choice == "6":
                show_data_files()
            elif choice == "7":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
