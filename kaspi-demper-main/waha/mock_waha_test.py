#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è WAHA —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, Any, Optional
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class MockWAHAServer:
    """–ú–æ–∫ WAHA —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.sessions = {}
        self.messages = []
        self.qr_codes = {}
    
    async def start_session(self, session_name: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        qr_code = f"QR_CODE_{session_id}"
        
        self.sessions[session_name] = {
            "id": session_id,
            "name": session_name,
            "status": "STARTING",
            "qr_code": qr_code,
            "created_at": datetime.now().isoformat()
        }
        
        self.qr_codes[session_name] = qr_code
        
        return {
            "id": session_id,
            "name": session_name,
            "status": "STARTING",
            "qr": qr_code
        }
    
    async def get_session_status(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        if session["status"] == "STARTING":
            # –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ CONNECTED
            session["status"] = "CONNECTED"
        
        return {
            "status": session["status"],
            "qr": session.get("qr_code") if session["status"] == "STARTING" else None
        }
    
    async def get_qr_code(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        if session["status"] == "STARTING":
            return {"qr": session["qr_code"]}
        else:
            return {"qr": None, "message": "Session already connected"}
    
    async def send_message(self, session_name: str, chat_id: str, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        if session["status"] != "CONNECTED":
            return {"error": "Session not connected"}
        
        message_id = str(uuid.uuid4())
        message = {
            "id": message_id,
            "session": session_name,
            "chatId": chat_id,
            "text": text,
            "timestamp": datetime.now().isoformat(),
            "status": "sent"
        }
        
        self.messages.append(message)
        
        return {
            "id": message_id,
            "status": "sent",
            "timestamp": message["timestamp"]
        }
    
    async def get_messages(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.messages

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
mock_server = MockWAHAServer()

async def test_mock_waha_server():
    """–¢–µ—Å—Ç –º–æ–∫ WAHA —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∫ WAHA —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_result = await mock_server.start_session("kaspi_demper_session")
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_result['name']}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {session_result['status']}")
        print(f"‚úÖ QR –∫–æ–¥: {session_result['qr']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = await mock_server.get_session_status("kaspi_demper_session")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {status_result['status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º QR –∫–æ–¥
        qr_result = await mock_server.get_qr_code("kaspi_demper_session")
        if qr_result.get('qr'):
            print(f"‚úÖ QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {qr_result['qr']}")
        else:
            print("‚úÖ QR –∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

async def test_send_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_result = await mock_server.send_message(
            "kaspi_demper_session",
            "77001234567@c.us",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É. üöÄ"
        )
        
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print(f"‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_result['id']}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {message_result['status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await mock_server.get_messages()
        print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(messages)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def test_order_template():
    """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞–∫–∞–∑–∞...")
    
    try:
        import models
        import uuid
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template = models.WhatsAppTemplate(
            template_name="order_ready_template",
            template_text="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}""",
            store_id=str(uuid.uuid4())
        )
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = {
            "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            "order_id": "ORD-12345",
            "product_name": "iPhone 15 Pro",
            "quantity": 1,
            "shop_name": "TechStore Kazakhstan"
        }
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        message_text = template.template_text
        for key, value in order_data.items():
            message_text = message_text.replace(f"{{{key}}}", str(value))
        
        print("‚úÖ –®–∞–±–ª–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üì± –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print("-" * 60)
        print(message_text)
        print("-" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return False

async def test_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await mock_server.start_session("kaspi_demper_session")
        print("‚úÖ –®–∞–≥ 1: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # 2. –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
        await asyncio.sleep(1)
        status = await mock_server.get_session_status("kaspi_demper_session")
        print(f"‚úÖ –®–∞–≥ 2: –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - {status['status']}")
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
        message_result = await mock_server.send_message(
            "kaspi_demper_session",
            "77001234567@c.us",
            """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ ORD-12345 "iPhone 15 Pro", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
TechStore Kazakhstan"""
        )
        
        print(f"‚úÖ –®–∞–≥ 3: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {message_result['id']})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        messages = await mock_server.get_messages()
        print(f"‚úÖ –®–∞–≥ 4: –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(messages)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WhatsApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–º\n")
    
    tests = [
        test_mock_waha_server,
        test_send_message,
        test_full_workflow
    ]
    
    passed = 0
    total = len(tests) + 1  # +1 –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    if test_order_template():
        passed += 1
    print()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in tests:
        if await test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüì± –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ WhatsApp:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WAHA —Å–µ—Ä–≤–µ—Ä: docker-compose -f docker-compose.waha.yml up")
        print("3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp")
        print("4. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
