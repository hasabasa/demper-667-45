#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp –Ω–æ–º–µ—Ä–∞
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, Any, Optional
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class AutomaticWAHATest:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç WAHA –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞"""
    
    def __init__(self):
        self.session_name = "kaspi_demper_session"
        self.session_data = None
        self.qr_code = None
        self.is_connected = False
        
    def generate_qr_code(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.qr_code = f"WAHA_QR_{uuid.uuid4().hex[:16].upper()}"
        return self.qr_code
    
    def simulate_connection_process(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞"""
        print("üì± –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ WhatsApp...")
        print()
        print("üîó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("3. –ù–∞–∂–º–∏—Ç–µ '–°–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'")
        print("4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∏–∂–µ:")
        print()
        
        # –ö—Ä–∞—Å–∏–≤—ã–π QR –∫–æ–¥
        self.display_qr_code()
        
        print(f"QR Code: {self.qr_code}")
        print()
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        import time
        for i in range(3):
            print(f"   {'.' * (i + 1)}")
            time.sleep(1)
        
        self.is_connected = True
        print("‚úÖ –ù–æ–º–µ—Ä WhatsApp —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        return True
    
    def display_qr_code(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–∞"""
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà                            ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà                    ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà            ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà            ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà                    ‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà                            ‚ñà‚ñà  ‚îÇ")
        print("‚îÇ  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    def test_session_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
        if not self.is_connected:
            return {
                "status": "STARTING",
                "qr": self.qr_code,
                "message": "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞"
            }
        else:
            return {
                "status": "CONNECTED",
                "qr": None,
                "message": "–ù–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            }
    
    def test_send_message(self, phone_number: str, message: str):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.is_connected:
            return {
                "success": False,
                "error": "–°–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è WhatsApp
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        if clean_phone.startswith('8'):
            clean_phone = '7' + clean_phone[1:]
        elif not clean_phone.startswith('7'):
            clean_phone = '7' + clean_phone
        
        whatsapp_phone = clean_phone + "@c.us"
        
        message_id = str(uuid.uuid4())
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print(f"   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {whatsapp_phone}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
        print(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
        
        return {
            "success": True,
            "message_id": message_id,
            "chat_id": whatsapp_phone,
            "status": "sent",
            "timestamp": datetime.now().isoformat()
        }
    
    def test_order_notification(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ...")
        
        # –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_data = {
            "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            "customer_phone": "+77001234567",
            "order_id": "KASPI-ORD-2024-001",
            "product_name": "iPhone 15 Pro 256GB Space Black",
            "quantity": 1,
            "shop_name": "TechStore Kazakhstan"
        }
        
        # –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        template = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}"""
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        message_text = template
        for key, value in order_data.items():
            message_text = message_text.replace(f"{{{key}}}", str(value))
        
        print("üì± –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print("=" * 60)
        print(message_text)
        print("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = self.test_send_message(order_data["customer_phone"], message_text)
        
        if result["success"]:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['error']}")
            return False
    
    def test_multiple_orders(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
        print("\nüõçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        orders = [
            {
                "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
                "customer_phone": "+77001234567",
                "order_id": "KASPI-ORD-2024-001",
                "product_name": "iPhone 15 Pro 256GB Space Black",
                "quantity": 1,
                "shop_name": "TechStore Kazakhstan"
            },
            {
                "customer_name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                "customer_phone": "+77012345678",
                "order_id": "KASPI-ORD-2024-002",
                "product_name": "Samsung Galaxy S24 Ultra",
                "quantity": 2,
                "shop_name": "TechStore Kazakhstan"
            },
            {
                "customer_name": "–ï—Ä–ª–∞–Ω –ö–∞—Å—ã–º–æ–≤",
                "customer_phone": "+77023456789",
                "order_id": "KASPI-ORD-2024-003",
                "product_name": "MacBook Pro M3",
                "quantity": 1,
                "shop_name": "TechStore Kazakhstan"
            }
        ]
        
        template = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}"""
        
        sent_count = 0
        for i, order in enumerate(orders, 1):
            print(f"\nüì¶ –ó–∞–∫–∞–∑ {i}: {order['order_id']}")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            message_text = template
            for key, value in order.items():
                message_text = message_text.replace(f"{{{key}}}", str(value))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = self.test_send_message(order["customer_phone"], message_text)
            
            if result["success"]:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {order['customer_name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                sent_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {order['customer_name']}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sent_count}/{len(orders)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return sent_count == len(orders)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp –Ω–æ–º–µ—Ä–∞")
    print("=" * 60)
    
    test = AutomaticWAHATest()
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    print("\nüìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ WAHA")
    test.session_data = {
        "name": test.session_name,
        "status": "STARTING",
        "created_at": datetime.now().isoformat()
    }
    test.generate_qr_code()
    print(f"‚úÖ –°–µ—Å—Å–∏—è '{test.session_name}' —Å–æ–∑–¥–∞–Ω–∞")
    print(f"‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {test.qr_code}")
    
    # –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    print("\nüì± –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ WhatsApp")
    if test.simulate_connection_process():
        print("‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–º–µ—Ä")
        return False
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print("\nüîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏")
    status = test.test_session_status()
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status['status']}")
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: {status['message']}")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    print("\nüì§ –®–∞–≥ 4: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Kaspi Demper WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏! üöÄ"
    result = test.test_send_message("+77001234567", test_message)
    
    if result["success"]:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['error']}")
        return False
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
    print("\nüõçÔ∏è –®–∞–≥ 5: –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ")
    if test.test_order_notification():
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∑–∞–∫–∞–∑–µ")
        return False
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    print("\nüì¶ –®–∞–≥ 6: –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    if test.test_multiple_orders():
        print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö")
        return False
    
    # –ò—Ç–æ–≥–∏
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 60)
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ WhatsApp —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ")
    print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≥–æ—Ç–æ–≤—ã")
    print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    print("\nüöÄ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop —Å https://docs.docker.com/get-docker/")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start_waha.sh")
    print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ QR –∫–æ–¥")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å Kaspi Demper")
    print("5. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
    
    print("\nüì± –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("# –ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥:")
    print("curl http://localhost:3000/api/sessions/kaspi_demper_session/qr")
    print()
    print("# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:")
    print("curl http://localhost:3000/api/sessions/kaspi_demper_session/status")
    print()
    print("# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print('curl -X POST http://localhost:3000/api/sendText \\')
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"session": "kaspi_demper_session", "chatId": "77001234567@c.us", "text": "–¢–µ—Å—Ç!"}\'')
    
    return True

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
