#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ WAHA
"""

import sys
import os
import uuid
import asyncio
import aiohttp
from datetime import datetime
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_waha_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WAHA —Å–µ—Ä–≤–µ—Ä—É"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WAHA —Å–µ—Ä–≤–µ—Ä—É...")
    
    waha_url = "http://localhost:3000"
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            async with session.get(f"{waha_url}/api/health") as response:
                if response.status == 200:
                    print("‚úÖ WAHA —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå WAHA —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WAHA —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WAHA —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000")
        return False

async def test_create_session():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ WAHA"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    
    waha_url = "http://localhost:3000"
    session_name = "kaspi_demper_session"
    
    try:
        async with aiohttp.ClientSession() as session:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_data = {
                "name": session_name,
                "config": {
                    "webhooks": [
                        {
                            "url": "http://localhost:8000/waha/webhook",
                            "events": ["message", "session.status"]
                        }
                    ]
                }
            }
            
            async with session.post(
                f"{waha_url}/api/sessions/start",
                json=session_data
            ) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    print(f"‚úÖ –°–µ—Å—Å–∏—è '{session_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    print(f"‚ùå –û—Ç–≤–µ—Ç: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def test_session_status():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏...")
    
    waha_url = "http://localhost:3000"
    session_name = "kaspi_demper_session"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{waha_url}/api/sessions/{session_name}/status") as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {result.get('status', 'unknown')}")
                    print(f"‚úÖ QR –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: {result.get('qr', False)}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def test_get_qr_code():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞...")
    
    waha_url = "http://localhost:3000"
    session_name = "kaspi_demper_session"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{waha_url}/api/sessions/{session_name}/qr") as response:
                if response.status == 200:
                    result = await response.json()
                    qr_code = result.get('qr', '')
                    if qr_code:
                        print("‚úÖ QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        print("üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        print(f"üîó QR –∫–æ–¥: {qr_code[:50]}...")
                        return True
                    else:
                        print("‚ö†Ô∏è  QR –∫–æ–¥ –ø—É—Å—Ç–æ–π - –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Å—Å–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                        return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞ (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞: {e}")
        return False

async def test_send_test_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    waha_url = "http://localhost:3000"
    session_name = "kaspi_demper_session"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
    test_phone = "77001234567@c.us"  # –§–æ—Ä–º–∞—Ç WhatsApp
    
    try:
        async with aiohttp.ClientSession() as session:
            message_data = {
                "session": session_name,
                "chatId": test_phone,
                "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Kaspi Demper WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏! üöÄ"
            }
            
            async with session.post(
                f"{waha_url}/api/sendText",
                json=message_data
            ) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    print(f"‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('id', 'unknown')}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    print(f"‚ùå –û—Ç–≤–µ—Ç: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def test_order_data_model():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞...")
    
    try:
        import models
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order = models.OrderData(
            customer_name="–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            customer_phone="+77001234567",
            order_id="ORD-12345",
            product_name="iPhone 15 Pro",
            quantity=1,
            total_amount=450000.0,
            delivery_type="PICKUP",
            order_date=datetime.now().isoformat(),
            shop_name="TechStore Kazakhstan"
        )
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.customer_name}")
        print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}")
        print(f"‚úÖ –ó–∞–∫–∞–∑: {order.order_id}")
        print(f"‚úÖ –¢–æ–≤–∞—Ä: {order.product_name}")
        print(f"‚úÖ –°—É–º–º–∞: {order.total_amount} —Ç–µ–Ω–≥–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
        return False

def test_message_template():
    """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        import models
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template = models.WhatsAppTemplate(
            template_name="order_ready_template",
            template_text="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}""",
            store_id=str(uuid.uuid4())
        )
        
        print("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        test_data = {
            "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            "order_id": "ORD-12345",
            "product_name": "iPhone 15 Pro",
            "quantity": 1,
            "shop_name": "TechStore Kazakhstan"
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        message_text = template.template_text
        for key, value in test_data.items():
            message_text = message_text.replace(f"{{{key}}}", str(value))
        
        print("‚úÖ –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üì± –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
        print("-" * 50)
        print(message_text)
        print("-" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp –Ω–æ–º–µ—Ä–∞\n")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        test_order_data_model,
        test_message_template
    ]
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        test_waha_server_connection,
        test_create_session,
        test_session_status,
        test_get_qr_code,
        # test_send_test_message  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    ]
    
    passed = 0
    total = len(sync_tests) + len(async_tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in sync_tests:
        if test():
            passed += 1
        print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in async_tests:
        if await test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ WAHA —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞!")
        print("\nüì± –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp")
        print("2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏")
        print("4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WAHA —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 3000")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Docker")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
