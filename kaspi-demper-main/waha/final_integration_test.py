#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WAHA —Å –¥–∞–Ω–Ω—ã–º–∏ Kaspi
"""

import sys
import os
import uuid
import asyncio
from datetime import datetime
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_kaspi_order_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤ Kaspi"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ Kaspi...")
    
    try:
        import models
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ Kaspi API
        kaspi_order_data = {
            "order_id": "KASPI-ORD-2024-001",
            "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            "customer_phone": "+77001234567",
            "product_name": "iPhone 15 Pro 256GB Space Black",
            "quantity": 1,
            "total_amount": 450000.0,
            "delivery_type": "PICKUP",
            "order_date": datetime.now().isoformat(),
            "shop_name": "TechStore Kazakhstan"
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç OrderData
        order = models.OrderData(**kaspi_order_data)
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ Kaspi –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ ID –∑–∞–∫–∞–∑–∞: {order.order_id}")
        print(f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.customer_name}")
        print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}")
        print(f"‚úÖ –¢–æ–≤–∞—Ä: {order.product_name}")
        print(f"‚úÖ –°—É–º–º–∞: {order.total_amount:,} —Ç–µ–Ω–≥–µ")
        
        return order
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Kaspi: {e}")
        return None

def test_whatsapp_template_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        import models
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        template = models.WhatsAppTemplate(
            template_name="kaspi_order_ready",
            template_text="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}""",
            store_id=str(uuid.uuid4())
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order = test_kaspi_order_integration()
        if not order:
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        template_data = {
            "customer_name": order.customer_name,
            "order_id": order.order_id,
            "product_name": order.product_name,
            "quantity": order.quantity,
            "shop_name": order.shop_name
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
        message_text = template.template_text
        for key, value in template_data.items():
            message_text = message_text.replace(f"{{{key}}}", str(value))
        
        print("‚úÖ –®–∞–±–ª–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üì± –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        print("=" * 60)
        print(message_text)
        print("=" * 60)
        
        return message_text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return None

def test_phone_number_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
    
    try:
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
        phone_formats = [
            "+77001234567",
            "77001234567", 
            "87001234567",
            "8 (700) 123-45-67",
            "+7 700 123 45 67"
        ]
        
        for phone in phone_formats:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_phone = ''.join(filter(str.isdigit, phone))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if clean_phone.startswith('8'):
                clean_phone = '7' + clean_phone[1:]
            elif not clean_phone.startswith('7'):
                clean_phone = '7' + clean_phone
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è WhatsApp
            whatsapp_phone = clean_phone + "@c.us"
            
            print(f"‚úÖ {phone} ‚Üí {whatsapp_phone}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤: {e}")
        return False

async def test_waha_message_sending():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WAHA"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WAHA...")
    
    try:
        import aiohttp
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = test_whatsapp_template_processing()
        if not message_text:
            return False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        waha_data = {
            "session": "kaspi_demper_session",
            "chatId": "77001234567@c.us",
            "text": message_text
        }
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        print(f"‚úÖ –°–µ—Å—Å–∏—è: {waha_data['session']}")
        print(f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {waha_data['chatId']}")
        print(f"‚úÖ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ WAHA API")
        print("üì° Endpoint: POST http://localhost:3000/api/sendText")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def test_integration_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–∑ Kaspi
        print("üì• –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–∑ Kaspi API")
        order = test_kaspi_order_integration()
        if not order:
            return False
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üìù –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        message_text = test_whatsapp_template_processing()
        if not message_text:
            return False
        
        # 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        print("üì± –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if not test_phone_number_formatting():
            return False
        
        # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ WAHA
        print("üì° –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ WAHA")
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–µ–∑ async
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ WAHA API")
        print("üì° Endpoint: POST http://localhost:3000/api/sendText")
        
        print("‚úÖ –í—Å–µ —à–∞–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        import models
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_cases = [
            {"order_id": "", "customer_name": "Test"},  # –ü—É—Å—Ç–æ–π ID
            {"order_id": "123", "customer_name": ""},    # –ü—É—Å—Ç–æ–µ –∏–º—è
            {"order_id": "123", "customer_name": "Test", "customer_phone": "invalid"}  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        ]
        
        for i, invalid_data in enumerate(invalid_cases, 1):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å OrderData —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                order = models.OrderData(**invalid_data)
                print(f"‚ùå –¢–µ—Å—Ç {i}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
                return False
            except Exception:
                print(f"‚úÖ –¢–µ—Å—Ç {i}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WAHA —Å Kaspi\n")
    
    tests = [
        test_kaspi_order_integration,
        test_whatsapp_template_processing,
        test_phone_number_formatting,
        test_waha_message_sending,
        test_integration_workflow,
        test_error_handling
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if await test() if asyncio.iscoroutinefunction(test) else test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WAHA —Å–µ—Ä–≤–µ—Ä: ./start_waha.sh")
        print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp —á–µ—Ä–µ–∑ QR –∫–æ–¥")
        print("4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Kaspi Demper")
        print("5. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
