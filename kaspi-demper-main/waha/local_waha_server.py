#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import uuid
import webbrowser
from datetime import datetime
from typing import Dict, Any, Optional
import sys
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.parse
import threading
import time

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class MockWAHAServer:
    """–ú–æ–∫ WAHA —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.sessions = {}
        self.messages = []
        self.qr_codes = {}
        self.port = 3000
        
    def start_session(self, session_name: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = str(uuid.uuid4())
        qr_code = f"WAHA_QR_{session_id[:16].upper()}"
        
        self.sessions[session_name] = {
            "id": session_id,
            "name": session_name,
            "status": "STARTING",
            "qr_code": qr_code,
            "created_at": datetime.now().isoformat()
        }
        
        self.qr_codes[session_name] = qr_code
        
        return {
            "id": session_id,
            "name": session_name,
            "status": "STARTING",
            "qr": qr_code
        }
    
    def get_session_status(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        if session["status"] == "STARTING":
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            session["status"] = "CONNECTED"
        
        return {
            "status": session["status"],
            "qr": session.get("qr_code") if session["status"] == "STARTING" else None
        }
    
    def get_qr_code(self, session_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ QR –∫–æ–¥–∞"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        if session["status"] == "STARTING":
            return {"qr": session["qr_code"]}
        else:
            return {"qr": None, "message": "Session already connected"}
    
    def send_message(self, session_name: str, chat_id: str, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if session_name not in self.sessions:
            return {"error": "Session not found"}
        
        session = self.sessions[session_name]
        
        if session["status"] != "CONNECTED":
            return {"error": "Session not connected"}
        
        message_id = str(uuid.uuid4())
        message = {
            "id": message_id,
            "session": session_name,
            "chatId": chat_id,
            "text": text,
            "timestamp": datetime.now().isoformat(),
            "status": "sent"
        }
        
        self.messages.append(message)
        
        return {
            "id": message_id,
            "status": "sent",
            "timestamp": message["timestamp"]
        }
    
    def get_messages(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.messages

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
mock_server = MockWAHAServer()

class WAHARequestHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è WAHA API"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')
        
        try:
            if path_parts[2] == 'health':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"status": "ok"}).encode())
                
            elif path_parts[2] == 'sessions':
                if len(path_parts) >= 5:
                    session_name = path_parts[3]
                    action = path_parts[4]
                    
                    if action == 'status':
                        result = mock_server.get_session_status(session_name)
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(result).encode())
                        
                    elif action == 'qr':
                        result = mock_server.get_qr_code(session_name)
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(result).encode())
                        
                    elif action == 'messages':
                        result = mock_server.get_messages()
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        self.wfile.write(json.dumps(result).encode())
                        
                    else:
                        self.send_error(404)
                else:
                    self.send_error(404)
            else:
                self.send_error(404)
                
        except Exception as e:
            self.send_error(500, str(e))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')
        
        try:
            if path_parts[2] == 'sessions' and path_parts[3] == 'start':
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                session_name = data.get('name', 'default_session')
                result = mock_server.start_session(session_name)
                
                self.send_response(201)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(result).encode())
                
            elif path_parts[2] == 'sendText':
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                session_name = data.get('session')
                chat_id = data.get('chatId')
                text = data.get('text')
                
                result = mock_server.send_message(session_name, chat_id, text)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(result).encode())
                
            else:
                self.send_error(404)
                
        except Exception as e:
            self.send_error(500, str(e))
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        pass

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    server = HTTPServer(('localhost', 3000), WAHARequestHandler)
    print(f"üöÄ WAHA –º–æ–∫ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
    print(f"üì± API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000/api/")
    server.serve_forever()

def test_whatsapp_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WhatsApp...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_result = mock_server.start_session("kaspi_demper_session")
    print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_result['name']}")
    print(f"‚úÖ QR –∫–æ–¥: {session_result['qr']}")
    
    # –ü–æ–ª—É—á–∞–µ–º QR –∫–æ–¥
    qr_result = mock_server.get_qr_code("kaspi_demper_session")
    if qr_result.get('qr'):
        print(f"‚úÖ QR –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {qr_result['qr']}")
        print("\nüì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("3. –ù–∞–∂–º–∏—Ç–µ '–°–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'")
        print("4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥")
        print(f"5. QR –∫–æ–¥: {qr_result['qr']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_result = mock_server.get_session_status("kaspi_demper_session")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {status_result['status']}")
    
    return True

def test_send_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_result = mock_server.send_message(
        "kaspi_demper_session",
        "77001234567@c.us",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É. üöÄ"
    )
    
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    print(f"‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_result['id']}")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {message_result['status']}")
    
    return True

def test_order_notification():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    print("\nüõçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ...")
    
    try:
        import models
        import uuid
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template = models.WhatsAppTemplate(
            template_name="order_ready_template",
            template_text="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {customer_name}.
–í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_id} "{product_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É.

* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
* –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{shop_name}""",
            store_id=str(uuid.uuid4())
        )
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = {
            "customer_name": "–ê–π–¥–∞—Ä –ù—É—Ä–ª–∞–Ω–æ–≤",
            "order_id": "KASPI-ORD-2024-001",
            "product_name": "iPhone 15 Pro 256GB Space Black",
            "quantity": 1,
            "shop_name": "TechStore Kazakhstan"
        }
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        message_text = template.template_text
        for key, value in order_data.items():
            message_text = message_text.replace(f"{{{key}}}", str(value))
        
        print("üì± –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print("=" * 60)
        print(message_text)
        print("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = mock_server.send_message(
            "kaspi_demper_session",
            "77001234567@c.us",
            message_text
        )
        
        if result.get('id'):
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error')}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ WAHA —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_whatsapp_connection,
        test_send_message,
        test_order_notification
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ WAHA —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        print("\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å–∞–º:")
        print("üì± API: http://localhost:3000/api/")
        print("üîç Health: http://localhost:3000/api/health")
        print("üìä Sessions: http://localhost:3000/api/sessions/")
        
        print("\nüì± –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("# –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é:")
        print('curl -X POST http://localhost:3000/api/sessions/start \\')
        print('  -H "Content-Type: application/json" \\')
        print('  -d \'{"name": "kaspi_demper_session"}\'')
        print()
        print("# –ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥:")
        print("curl http://localhost:3000/api/sessions/kaspi_demper_session/qr")
        print()
        print("# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:")
        print("curl http://localhost:3000/api/sessions/kaspi_demper_session/status")
        print()
        print("# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print('curl -X POST http://localhost:3000/api/sendText \\')
        print('  -H "Content-Type: application/json" \\')
        print('  -d \'{"session": "kaspi_demper_session", "chatId": "77001234567@c.us", "text": "–¢–µ—Å—Ç!"}\'')
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=start_web_server)
        server_thread.daemon = True
        server_thread.start()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            webbrowser.open('http://localhost:3000/api/health')
        except:
            pass
        
        print("\n‚è≥ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
