# INTEGRATION_CODE_EXAMPLES.py
"""
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WAHA —Å api_parser.py
"""

# ==================== 1. –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø API_PARSER.PY ====================

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ api_parser.py:
"""

# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ api_parser.py
import logging
from waha.waha_integration import get_waha_manager
from waha.utils import get_error_handler, get_metrics_collector
from waha.security import get_security_validator

logger = logging.getLogger(__name__)

"""
–ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é get_sells() –Ω–∞ —ç—Ç—É:
"""

async def get_sells(shop_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π WAHA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    session_manager = SessionManager(shop_uid=shop_id)
    if not await session_manager.load():
        return False, '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
    
    cookies = session_manager.get_cookies()
    result = get_sells_delivery_request(session_manager.merchant_uid, cookies)
    
    # ========== WAHA –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========
    try:
        waha_manager = get_waha_manager()
        error_handler = get_error_handler()
        metrics_collector = get_metrics_collector()
        security_validator = get_security_validator()
        
        if waha_manager and result.get('orders'):
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(result.get('orders', []))} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è WAHA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            waha_results = await waha_manager.process_orders_for_store(
                shop_id, 
                result.get('orders', []), 
                session_manager.shop_name or "–ú–∞–≥–∞–∑–∏–Ω"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            await metrics_collector.increment("orders_processed", len(result.get('orders', [])))
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã WAHA –æ–±—Ä–∞–±–æ—Ç–∫–∏
            successful_notifications = sum(1 for r in waha_results if r.get('success', False))
            logger.info(f"WAHA: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_notifications} –∏–∑ {len(waha_results)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
    except Exception as e:
        error_handler.log_error(
            "waha_integration_error",
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {e}",
            {
                "shop_id": shop_id, 
                "orders_count": len(result.get('orders', [])),
                "error_type": type(e).__name__
            }
        )
        logger.error(f"–û—à–∏–±–∫–∞ WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {e}")
    # ====================================
    
    return True, result

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WAHA —Å—Ç–∞—Ç—É—Å–∞:
"""

async def check_waha_status_for_store(shop_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    """
    try:
        waha_manager = get_waha_manager()
        if not waha_manager:
            return {"status": "not_initialized", "message": "WAHA –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
        stats = await waha_manager.get_store_statistics(shop_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session_info = await waha_manager.waha_db.get_session_info(shop_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω
        template = await waha_manager.template_manager.get_active_template(shop_id)
        
        return {
            "status": "ok",
            "statistics": stats,
            "session_info": session_info.dict() if session_info else None,
            "has_active_template": template is not None,
            "template_name": template.template_name if template else None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WAHA —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {e}")
        return {"status": "error", "message": str(e)}

# ==================== 2. –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø MAIN.PY ====================

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤ main.py:
"""

from waha.waha_integration import initialize_waha, get_waha_router, shutdown_waha
from waha.config import initialize_config, load_environment_config
from waha.monitoring import initialize_monitoring, shutdown_monitoring

"""
–ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ event handlers –Ω–∞ —ç—Ç–∏:
"""

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    global pool
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Kaspi Demper —Å WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ë–î (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    pool = await create_pool()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WAHA
    try:
        env_config = load_environment_config("production")  # –∏–ª–∏ "development"
        initialize_config(**env_config)
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WAHA –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WAHA: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WAHA –º–æ–¥—É–ª—è
    try:
        await initialize_waha(pool, "http://localhost:3000")
        logger.info("‚úÖ WAHA –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WAHA: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        waha_manager = get_waha_manager()
        await initialize_monitoring(waha_manager.waha_db)
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WAHA –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        await shutdown_monitoring()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WAHA –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ WAHA –º–æ–¥—É–ª—è
    try:
        await shutdown_waha()
        logger.info("‚úÖ WAHA –º–æ–¥—É–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WAHA: {e}")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ë–î (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    if pool:
        await pool.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")

"""
–î–æ–±–∞–≤—å—Ç–µ —Ä–æ—É—Ç—ã WAHA –≤ main.py:
"""

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ WAHA
app.include_router(get_waha_router())

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ main.py:
"""

@app.get("/kaspi/waha-status/{shop_id}")
async def get_kaspi_waha_status(shop_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ Kaspi"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api_parser.py
        from api_parser import check_waha_status_for_store
        status = await check_waha_status_for_store(shop_id)
        
        return {
            "success": True,
            "shop_id": shop_id,
            "waha_status": status,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WAHA —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/kaspi/waha-test-notification/{shop_id}")
async def test_waha_notification(shop_id: str, test_data: dict):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WAHA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        waha_manager = get_waha_manager()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        test_order = {
            "orderId": f"TEST-{int(datetime.now().timestamp())}",
            "customerName": test_data.get("customer_name", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"),
            "customerPhone": test_data.get("phone_number", "+7XXXXXXXXXX"),
            "productName": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
            "quantity": test_data.get("quantity", 1),
            "totalPrice": test_data.get("total_amount", 1000.0),
            "deliveryType": "PICKUP",
            "createDate": int(datetime.now().timestamp() * 1000),
            "status": "NEW"
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        results = await waha_manager.process_orders_for_store(
            shop_id, 
            [test_order], 
            test_data.get("shop_name", "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω")
        )
        
        return {
            "success": True,
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "test_order": test_order,
            "results": results,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WAHA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/admin/waha/dashboard")
async def waha_admin_dashboard():
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        waha_manager = get_waha_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        enabled_stores = await waha_manager.waha_db.get_enabled_stores()
        
        dashboard_data = {
            "total_stores": len(enabled_stores),
            "waha_server_url": "http://localhost:3000",
            "stores": []
        }
        
        for store_id in enabled_stores:
            try:
                stats = await waha_manager.get_store_statistics(store_id)
                session_info = await waha_manager.waha_db.get_session_info(store_id)
                
                dashboard_data["stores"].append({
                    "store_id": str(store_id),
                    "statistics": stats,
                    "session_status": session_info.status if session_info else "not_configured",
                    "is_connected": session_info.is_connected if session_info else False,
                    "last_activity": session_info.last_activity.isoformat() if session_info and session_info.last_activity else None
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id}: {e}")
        
        return {
            "success": True,
            "dashboard": dashboard_data,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ WAHA: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# ==================== 3. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø ====================

"""
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:
"""

ENV_CONFIG = """
# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/kaspi_demper

# WAHA Configuration
WAHA_SERVER_URL=http://localhost:3000
WAHA_WEBHOOK_BASE_URL=http://your-server.com
WAHA_MAX_MESSAGES_PER_DAY=1000
WAHA_MESSAGE_DELAY_SECONDS=1.0
WAHA_RETRY_ATTEMPTS=3
WAHA_SESSION_TIMEOUT_MINUTES=30

# Security
WAHA_ENABLE_RATE_LIMITING=true
WAHA_RATE_LIMIT_WINDOW_MINUTES=60
WAHA_MAX_MESSAGES_PER_WINDOW=100
WAHA_VALIDATE_PHONE_NUMBERS=true

# Monitoring
WAHA_ENABLE_METRICS=true
WAHA_LOG_LEVEL=INFO
WAHA_ENABLE_ADMIN_NOTIFICATIONS=true
WAHA_ADMIN_NOTIFICATION_THRESHOLD=10

# Development
WAHA_DEBUG_MODE=false
WAHA_MOCK_WAHA_RESPONSES=false
"""

# ==================== 4. –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø API ====================

"""
–ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–æ–≤ API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""

# –ü—Ä–∏–º–µ—Ä 1: –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
QUICK_SETUP_EXAMPLE = """
curl -X POST "http://localhost:8000/kaspi/waha-quick-setup/123e4567-e89b-12d3-a456-426614174000" \
  -H "Content-Type: application/json" \
  -d '{
    "waha_server_url": "http://localhost:3000",
    "webhook_url": "http://localhost:8000/webhook/waha"
  }'
"""

# –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WAHA
STATUS_CHECK_EXAMPLE = """
curl -X GET "http://localhost:8000/kaspi/waha-status/123e4567-e89b-12d3-a456-426614174000"
"""

# –ü—Ä–∏–º–µ—Ä 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
TEST_NOTIFICATION_EXAMPLE = """
curl -X POST "http://localhost:8000/kaspi/waha-test-notification/123e4567-e89b-12d3-a456-426614174000" \
  -H "Content-Type: application/json" \
  -d '{
    "customer_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    "phone_number": "+71234567890",
    "product_name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
    "quantity": 2,
    "total_amount": 5000.0,
    "shop_name": "–ú–æ–π –º–∞–≥–∞–∑–∏–Ω"
  }'
"""

# –ü—Ä–∏–º–µ—Ä 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATISTICS_EXAMPLE = """
curl -X GET "http://localhost:8000/waha/statistics/123e4567-e89b-12d3-a456-426614174000?days=7"
"""

# –ü—Ä–∏–º–µ—Ä 5: –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
TEMPLATE_CREATION_EXAMPLE = """
curl -X POST "http://localhost:8000/waha/templates/123e4567-e89b-12d3-a456-426614174000" \
  -H "Content-Type: application/json" \
  -d '{
    "template_name": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ",
    "template_text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –í–∞—à –∑–∞–∫–∞–∑ N¬∫ {order_num} \"{product_name}\", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_qty} —à—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, {shop_name}"
  }'
"""

# ==================== 5. –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ api_parser.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WAHA:
"""

async def handle_waha_errors(shop_id: str, error: Exception, context: dict = None):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WAHA
    """
    try:
        error_handler = get_error_handler()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_handler.log_error(
            "waha_error",
            f"–û—à–∏–±–∫–∞ WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {str(error)}",
            {
                "shop_id": shop_id,
                "error_type": type(error).__name__,
                "context": context or {}
            }
        )
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if "connection" in str(error).lower():
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}")
        elif "session" in str(error).lower():
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}")
        elif "template" in str(error).lower():
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —à–∞–±–ª–æ–Ω–æ–º WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}")
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_id}: {error}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ WAHA: {e}")

# ==================== 6. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

"""
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ main.py –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ WAHA:
"""

async def periodic_waha_health_check():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WAHA —Å–∏—Å—Ç–µ–º—ã
    """
    while True:
        try:
            waha_manager = get_waha_manager()
            if waha_manager:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
                enabled_stores = await waha_manager.waha_db.get_enabled_stores()
                
                for store_id in enabled_stores:
                    try:
                        session_info = await waha_manager.waha_db.get_session_info(store_id)
                        if session_info and not session_info.is_connected:
                            logger.warning(f"–°–µ—Å—Å–∏—è WAHA –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ WAHA: {e}")
            await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.on_event("startup")
async def start_periodic_checks():
    asyncio.create_task(periodic_waha_health_check())

# ==================== 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ====================

"""
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_integration.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""

TEST_INTEGRATION_CODE = """
import asyncio
import pytest
from httpx import AsyncClient
from main import app

@pytest.mark.asyncio
async def test_waha_integration():
    \"\"\"–¢–µ—Å—Ç WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\"\"\"
    
    async with AsyncClient(app=app, base_url="http://localhost:8000") as client:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        response = await client.get("/health")
        assert response.status_code == 200
        
        health_data = response.json()
        assert health_data["status"] == "healthy"
        assert "waha" in health_data

@pytest.mark.asyncio
async def test_store_waha_status():
    \"\"\"–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ WAHA –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞\"\"\"
    
    test_store_id = "test-store-123"
    
    async with AsyncClient(app=app, base_url="http://localhost:8000") as client:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        response = await client.get(f"/kaspi/waha-status/{test_store_id}")
        assert response.status_code == 200
        
        status_data = response.json()
        assert status_data["success"] is True
        assert "waha_status" in status_data

@pytest.mark.asyncio
async def test_waha_notification():
    \"\"\"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ WAHA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"\"\"
    
    test_store_id = "test-store-123"
    
    async with AsyncClient(app=app, base_url="http://localhost:8000") as client:
        # –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        response = await client.post(
            f"/kaspi/waha-test-notification/{test_store_id}",
            json={
                "customer_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
                "phone_number": "+71234567890",
                "product_name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                "quantity": 1,
                "total_amount": 1000.0,
                "shop_name": "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω"
            }
        )
        
        assert response.status_code == 200
        result_data = response.json()
        assert result_data["success"] is True
        assert "test_order" in result_data

if __name__ == "__main__":
    asyncio.run(test_waha_integration())
    asyncio.run(test_store_waha_status())
    asyncio.run(test_waha_notification())
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã WAHA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
"""

print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WAHA —Å api_parser.py –≥–æ—Ç–æ–≤—ã!")
print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
